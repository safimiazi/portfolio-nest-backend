generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  name             String
  photo            String?
  designation      String?
  bio              String?
  githubLink       String?
  linkedinLink     String?
  twitterLink      String?
  websiteLink      String?
  resumeLink       String?
  education        String?
  otp              String?
  university       String?
  universityStart  String?
  universityEnd    String?
  gpa              String?
  location         String?
  phone            String?
  experience       String?
  changePasswordAt DateTime?
  projects         Project[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Skill            Skill[]
  WorkExperience   WorkExperience[]
  Testimonial      Testimonial[]
  CodingProfile    CodingProfile[]
  LearningGoal     LearningGoal[]
}

model Project {
  id                 Int      @id @default(autoincrement())
  userId             Int
  images             String[]
  usedTechnologies   String[]
  title              String?
  liveLink           String?
  githubFrontendLink String?
  githubBackendLink  String?
  shortDesc          String?
  detailsDesc        String?
  status             String?
  isFeatured         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Skill {
  id          Int      @id @default(autoincrement())
  userId      Int
  category    String // Frontend, Backend, DevOps
  name        String // Skill name (e.g., React, Node.js, Docker)
  proficiency Int // Proficiency percentage (0-100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([category, name]) // Optional: For faster queries
}

model WorkExperience {
  id     Int @id @default(autoincrement())
  userId Int

  role             String // Job title (e.g., Senior Full Stack Developer, Full Stack Developer)
  company          String // Company name (e.g., TechSolutions Inc., StartupXYZ)
  startDate        DateTime // Start date of the job
  endDate          DateTime? // End date (nullable for current role)
  isCurrent        Boolean   @default(false) // Indicates if the role is current
  responsibilities String // Description of responsibilities
  achievements     String[] // Array of key achievements
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])

  @@index([role, company]) // Optional: For faster queries
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  position  String
  content   String
  avatar    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model CodingProfile {
  id     Int @id @default(autoincrement())
  userId Int

  platform   String // e.g., LeetCode, HackerRank
  username   String // e.g., @mohebullamiazii
  profileUrl String? // Optional URL (e.g., https://leetcode.com/mohebullamiazii)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([platform, username]) // Optional: For faster queries
}

model LearningGoal {
  id     Int @id @default(autoincrement())
  userId Int

  category    category // Current Learning or Future Goals
  title       String // e.g., What are you currently learning?
  description String? // Optional description
  tags        String[] // Array of tags (e.g., Data Structures, Machine Learning)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([category, title]) // Optional: For faster queries
}

enum category {
  LEARNING
  GOAL
}
