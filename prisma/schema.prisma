generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  name             String
  designation      String?
  education        String?
  otp              String?
  university       String?
  universityStart  String?
  universityEnd    String?
  gpa              String?
  location         String?
  projectCompleted String?
  phone            String?
  experience       String?
  changePasswordAt DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bio              String?
  githubLink       String?
  linkedinLink     String?
  photo            String?
  resumeLink       String?
  twitterLink      String?
  websiteLink      String?
  CodingProfile    CodingProfile[]
  LearningGoal     LearningGoal[]
  projects         Project[]
  Skill            Skill[]
  Testimonial      Testimonial[]
  WorkExperience   WorkExperience[]
}

model Project {
  id                 Int      @id @default(autoincrement())
  userId             Int
  images             String[]
  usedTechnologies   String[]
  title              String?
  liveLink           String?
  githubFrontendLink String?
  githubBackendLink  String?
  shortDesc          String?
  detailsDesc        String?
  status             String?
  isFeatured         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model Skill {
  id          Int      @id @default(autoincrement())
  userId      Int
  category    String
  name        String
  proficiency Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([category, name])
}

model WorkExperience {
  id               Int       @id @default(autoincrement())
  userId           Int
  role             String
  company          String
  startDate        DateTime
  endDate          DateTime?
  isCurrent        Boolean   @default(false)
  responsibilities String
  achievements     String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])

  @@index([role, company])
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  position  String
  content   String
  avatar    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model CodingProfile {
  id         Int      @id @default(autoincrement())
  userId     Int
  platform   String
  username   String
  profileUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([platform, username])
}

model LearningGoal {
  id          Int      @id @default(autoincrement())
  userId      Int
  category    category
  title       String
  description String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([category, title])
}

enum category {
  LEARNING
  GOAL
}
